Microsoft (R) Macro Assembler Version 14.16.27026.1	    01/18/19 15:34:19
%Simple Arithmetic     (Project01.asm			     Page 1 - 1


				TITLE Simple Arithmetic     (Project01.asm)

				; Author: Andrew Wilson
				; Last Modified: Jan 11, 2019
				; OSU email address: wilsoan6@oregonstate.edu
				; Course number/section: 271-400
				; Project Number: #1                Due Date: Jan 21, 2019
				; Description: This program will display the program title and programmer name,
				;			   display instructions for the user, prompt for two numbers, then
				;			   calculate the sum, difference, product, quotient and remainder of the numbers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 00000000		number_1		DWORD	?	;integer to be entered by user
 00000004 00000000		number_2		DWORD	?	;integer to be entered by user
 00000008 00000000		repeat_choice	DWORD	?	;stores users answer to repeat prompt
 0000000C 00000000		sum				DWORD	?
 00000010 00000000		difference		DWORD	?
 00000014 00000000		product			DWORD	?
 00000018 00000000		quotient		DWORD	?
 0000001C 00000000		remainder		DWORD	?
 00000020 00000000		f_remainder		DWORD	?
 00000024 20 20 20 20 20	intro_1			BYTE	"     Simple Arithmetic     by Andrew Wilson ", 0
	   53 69 6D 70 6C
	   65 20 41 72 69
	   74 68 6D 65 74
	   69 63 20 20 20
	   20 20 62 79 20
	   41 6E 64 72 65
	   77 20 57 69 6C
	   73 6F 6E 20 00
 00000051 2A 2A 45 43 3A	ec_1			BYTE	"**EC: Repeats until the user chooses to quit.",0
	   20 52 65 70 65
	   61 74 73 20 75
	   6E 74 69 6C 20
	   74 68 65 20 75
	   73 65 72 20 63
	   68 6F 6F 73 65
	   73 20 74 6F 20
	   71 75 69 74 2E
	   00
 0000007F 2A 2A 45 43 3A	ec_2			BYTE	"**EC: Program verifies second number less than first.",0
	   20 50 72 6F 67
	   72 61 6D 20 76
	   65 72 69 66 69
	   65 73 20 73 65
	   63 6F 6E 64 20
	   6E 75 6D 62 65
	   72 20 6C 65 73
	   73 20 74 68 61
	   6E 20 66 69 72
	   73 74 2E 00
 000000B5 2A 2A 45 43 3A	ec_3			BYTE	"**EC: Program displays the quotient as a floating-point number, rounded to the nearest .001.",0
	   20 50 72 6F 67
	   72 61 6D 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 71 75 6F
	   74 69 65 6E 74
	   20 61 73 20 61
	   20 66 6C 6F 61
	   74 69 6E 67 2D
	   70 6F 69 6E 74
	   20 6E 75 6D 62
	   65 72 2C 20 72
	   6F 75 6E 64 65
	   64 20 74 6F 20
	   74 68 65 20 6E
	   65 61 72 65 73
	   74 20 2E 30 30
	   31 2E 00
 00000112 45 6E 74 65 72	intro_2			BYTE	"Enter two numbers and I'll show you the sum, difference, product, quotient and remainder.", 0
	   20 74 77 6F 20
	   6E 75 6D 62 65
	   72 73 20 61 6E
	   64 20 49 27 6C
	   6C 20 73 68 6F
	   77 20 79 6F 75
	   20 74 68 65 20
	   73 75 6D 2C 20
	   64 69 66 66 65
	   72 65 6E 63 65
	   2C 20 70 72 6F
	   64 75 63 74 2C
	   20 71 75 6F 74
	   69 65 6E 74 20
	   61 6E 64 20 72
	   65 6D 61 69 6E
	   64 65 72 2E 00
 0000016C 46 69 72 73 74	prompt_1		BYTE	"First number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 0000017B 53 65 63 6F 6E	prompt_2		BYTE	"Second number: ", 0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000018B 54 68 65 20 73	prompt_error	BYTE	"The second number must be less than the first!",0
	   65 63 6F 6E 64
	   20 6E 75 6D 62
	   65 72 20 6D 75
	   73 74 20 62 65
	   20 6C 65 73 73
	   20 74 68 61 6E
	   20 74 68 65 20
	   66 69 72 73 74
	   21 00
 000001BA 20 2B 20 00		sum_string		BYTE	" + ", 0
 000001BE 20 2D 20 00		diff_string		BYTE	" - ", 0
 000001C2 20 78 20 00		prod_string		BYTE	" x ", 0
 000001C6 20 F6 20 00		quot_string		BYTE	" ", 246, " ", 0	;246 is the ÷ symbol
 000001CA 20 3D 20 00		eqal_string		BYTE	" = ", 0
 000001CE 2C 20 72 65 6D	rem_string		BYTE	", remainder ", 0
	   61 69 6E 64 65
	   72 20 00
 000001DB 20 20 20 28 54	dec_string_1	BYTE	"   (To the nearest thousandth, that's ",0
	   6F 20 74 68 65
	   20 6E 65 61 72
	   65 73 74 20 74
	   68 6F 75 73 61
	   6E 64 74 68 2C
	   20 74 68 61 74
	   27 73 20 00
 00000202 2E 00			dec_dot			BYTE	".",0
 00000204 30 00			dec_zero		BYTE	"0",0
 00000206 29 00			dec_string_2	BYTE	")",0
 00000208 49 66 20 79 6F	repeat_1		BYTE	"If you would like to quit, enter 1", 0
	   75 20 77 6F 75
	   6C 64 20 6C 69
	   6B 65 20 74 6F
	   20 71 75 69 74
	   2C 20 65 6E 74
	   65 72 20 31 00
 0000022B 4F 74 68 65 72	repeat_2		BYTE	"Otherwise, enter any other number to compare two more numbers", 0
	   77 69 73 65 2C
	   20 65 6E 74 65
	   72 20 61 6E 79
	   20 6F 74 68 65
	   72 20 6E 75 6D
	   62 65 72 20 74
	   6F 20 63 6F 6D
	   70 61 72 65 20
	   74 77 6F 20 6D
	   6F 72 65 20 6E
	   75 6D 62 65 72
	   73 00
 00000269 47 6F 6F 64 62	goodBye			BYTE	"Goodbye!", 0
	   79 65 21 00


 00000000			.code
 00000000			main PROC

				; initialize the FPU for division
 00000000  9B DB E3			FINIT

				;Introduce programmer and display program name
 00000003  BA 00000024 R		mov		edx, OFFSET	intro_1
 00000008  E8 00000000 E		call	WriteString
 0000000D  E8 00000000 E		call	crlf
 00000012  BA 00000051 R		mov		edx, OFFSET	ec_1
 00000017  E8 00000000 E		call	WriteString
 0000001C  E8 00000000 E		call	crlf
 00000021  BA 0000007F R		mov		edx, OFFSET	ec_2
 00000026  E8 00000000 E		call	WriteString
 0000002B  E8 00000000 E		call	crlf
 00000030  BA 000000B5 R		mov		edx, OFFSET	ec_3
 00000035  E8 00000000 E		call	WriteString
 0000003A  E8 00000000 E		call	crlf
 0000003F  E8 00000000 E		call	crlf

 00000044			repeat_entrypoint:	;jump here if user repeats/enters wrong values

				;display instructions for the user
 00000044  BA 00000112 R		mov		edx, OFFSET	intro_2
 00000049  E8 00000000 E		call	WriteString
 0000004E  E8 00000000 E		call	crlf
 00000053  E8 00000000 E		call	crlf

				;prompt for two numbers
 00000058  BA 0000016C R		mov		edx, OFFSET	prompt_1
 0000005D  E8 00000000 E		call	WriteString
 00000062  E8 00000000 E		call	ReadInt
 00000067  A3 00000000 R		mov		number_1, eax

 0000006C  BA 0000017B R		mov		edx, OFFSET	prompt_2
 00000071  E8 00000000 E		call	WriteString
 00000076  E8 00000000 E		call	ReadInt
 0000007B  A3 00000004 R		mov		number_2, eax
 00000080  E8 00000000 E		call	crlf

				;validate that the first number is greater than the second
 00000085  A1 00000000 R		mov		eax, number_1	
 0000008A  3B 05 00000004 R		CMP		eax, number_2
 00000090  7E 02			jle		number_too_big
 00000092  EB 16			jmp		everything_is_fine

					;if the second number is equal to or greater than the first, display the error and jump back to initial promot
 00000094				number_too_big: 
 00000094  BA 0000018B R			mov		edx, OFFSET	prompt_error
 00000099  E8 00000000 E			call	WriteString
 0000009E  E8 00000000 E			call	crlf
 000000A3  E8 00000000 E			call	crlf
 000000A8  EB 9A				jmp		repeat_entrypoint

					;if the second number is smaller than the first, keep going
 000000AA				everything_is_fine:

				;calculate sum
 000000AA  A1 00000000 R		mov		eax, number_1
 000000AF  03 05 00000004 R		add		eax, number_2
 000000B5  A3 0000000C R		mov		sum, eax
				;display sum
 000000BA  A1 00000000 R		mov		eax, number_1
 000000BF  E8 00000000 E		call	WriteDec
 000000C4  BA 000001BA R		mov		edx, OFFSET	sum_string
 000000C9  E8 00000000 E		call	WriteString
 000000CE  A1 00000004 R		mov		eax, number_2
 000000D3  E8 00000000 E		call	WriteDec
 000000D8  BA 000001CA R		mov		edx, OFFSET	eqal_string
 000000DD  E8 00000000 E		call	WriteString
 000000E2  A1 0000000C R		mov		eax, sum
 000000E7  E8 00000000 E		call	WriteDec
 000000EC  E8 00000000 E		call	crlf

				;calculate difference
 000000F1  A1 00000000 R		mov		eax, number_1
 000000F6  2B 05 00000004 R		sub		eax, number_2
 000000FC  A3 00000010 R		mov		difference, eax	
				;display difference
 00000101  A1 00000000 R		mov		eax, number_1
 00000106  E8 00000000 E		call	WriteDec
 0000010B  BA 000001BE R		mov		edx, OFFSET	diff_string
 00000110  E8 00000000 E		call	WriteString
 00000115  A1 00000004 R		mov		eax, number_2
 0000011A  E8 00000000 E		call	WriteDec
 0000011F  BA 000001CA R		mov		edx, OFFSET	eqal_string
 00000124  E8 00000000 E		call	WriteString
 00000129  A1 00000010 R		mov		eax, difference
 0000012E  E8 00000000 E		call	WriteDec
 00000133  E8 00000000 E		call	crlf

				;calculate product 
 00000138  A1 00000000 R		mov		eax, number_1
 0000013D  8B 1D 00000004 R		mov		ebx, number_2
 00000143  F7 E3			mul		ebx
 00000145  A3 00000018 R		mov		quotient, eax
				;display product
 0000014A  A1 00000000 R		mov		eax, number_1
 0000014F  E8 00000000 E		call	WriteDec
 00000154  BA 000001C2 R		mov		edx, OFFSET	prod_string
 00000159  E8 00000000 E		call	WriteString
 0000015E  A1 00000004 R		mov		eax, number_2
 00000163  E8 00000000 E		call	WriteDec
 00000168  BA 000001CA R		mov		edx, OFFSET	eqal_string
 0000016D  E8 00000000 E		call	WriteString
 00000172  A1 00000018 R		mov		eax, quotient
 00000177  E8 00000000 E		call	WriteDec
 0000017C  E8 00000000 E		call	crlf

				;calculate quotient and remainder
 00000181  A1 00000000 R		mov		eax, number_1
 00000186  8B 1D 00000004 R		mov		ebx, number_2
 0000018C  99				cdq
 0000018D  F7 F3			div		ebx
 0000018F  A3 00000018 R		mov		quotient, eax
 00000194  89 15 0000001C R		mov		remainder, edx


				;display quotient and remainder
 0000019A  A1 00000000 R		mov		eax, number_1
 0000019F  E8 00000000 E		call	WriteDec
 000001A4  BA 000001C6 R		mov		edx, OFFSET	quot_string
 000001A9  E8 00000000 E		call	WriteString
 000001AE  A1 00000004 R		mov		eax, number_2
 000001B3  E8 00000000 E		call	WriteDec
 000001B8  BA 000001CA R		mov		edx, OFFSET	eqal_string
 000001BD  E8 00000000 E		call	WriteString
 000001C2  A1 00000018 R		mov		eax, quotient
 000001C7  E8 00000000 E		call	WriteDec
 000001CC  BA 000001CE R		mov		edx, OFFSET	rem_string
 000001D1  E8 00000000 E		call	WriteString
 000001D6  A1 0000001C R		mov		eax, remainder
 000001DB  E8 00000000 E		call	WriteDec

				;calculate floating-point remainder

 000001E0  A1 0000001C R		mov		eax, remainder		;multiplying the remainder by 1000
 000001E5  BB 000003E8			mov		ebx, 1000
 000001EA  F7 E3			mul		ebx
 000001EC  A3 00000020 R		mov		f_remainder, eax
 000001F1  A1 00000020 R		mov		eax, f_remainder	;then dividing it by number_2
 000001F6  8B 1D 00000004 R		mov		ebx, number_2
 000001FC  99				cdq
 000001FD  F7 F3			div		ebx
 000001FF  A3 00000020 R		mov		f_remainder, eax	;gives the first three digits after the decimal point


				;display floating-point quotient
 00000204  BA 000001DB R		mov		edx, OFFSET	dec_string_1
 00000209  E8 00000000 E		call	WriteString
 0000020E  A1 00000018 R		mov		eax, quotient
 00000213  E8 00000000 E		call	WriteDec
 00000218  BA 00000202 R		mov		edx, OFFSET	dec_dot
 0000021D  E8 00000000 E		call	WriteString

					
 00000222  A1 00000020 R		mov		eax, f_remainder	;if the decimal starts with 0 (eg 1.025) we need to add a 0 to the output window
 00000227  83 F8 64			CMP		eax, 100
 0000022A  7C 02			jl		less_than_100
 0000022C  EB 0A			jmp		not_less_than_100
					
 0000022E				less_than_100: 
 0000022E  BA 00000204 R			mov		edx, OFFSET	dec_zero
 00000233  E8 00000000 E			call	WriteString

 00000238				not_less_than_100:

 00000238  A1 00000020 R		mov		eax, f_remainder
 0000023D  E8 00000000 E		call	WriteDec
 00000242  BA 00000206 R		mov		edx, OFFSET	dec_string_2
 00000247  E8 00000000 E		call	WriteString

 0000024C  E8 00000000 E		call	crlf
 00000251  E8 00000000 E		call	crlf

				;ask if user wants to quit or repeat
 00000256  BA 00000208 R		mov		edx, OFFSET	repeat_1
 0000025B  E8 00000000 E		call	WriteString
 00000260  E8 00000000 E		call	crlf
 00000265  BA 0000022B R		mov		edx, OFFSET	repeat_2
 0000026A  E8 00000000 E		call	WriteString
 0000026F  E8 00000000 E		call	crlf

				;reads user input, repeating the program unless '1' is entered
 00000274  E8 00000000 E		call	ReadInt
 00000279  E8 00000000 E		call	crlf
 0000027E  A3 00000008 R		mov		repeat_choice, eax
 00000283  83 F8 01			CMP		eax, 1
 00000286  0F 85 FFFFFDB8		jne		repeat_entrypoint

				;Say goodbye
 0000028C  BA 00000269 R		mov		edx, OFFSET	goodBye
 00000291  E8 00000000 E		call	WriteString
 00000296  E8 00000000 E		call	crlf

					exit	; exit to operating system
 0000029B  6A 00	   *	    push   +000000000h
 0000029D  E8 00000000 E   *	    call   ExitProcess
 000002A2			main ENDP

				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    01/18/19 15:34:19
%Simple Arithmetic     (Project01.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000272 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002A2 Public STDCALL
  repeat_entrypoint  . . . . . .	L Near	 00000044 _TEXT	
  number_too_big . . . . . . . .	L Near	 00000094 _TEXT	
  everything_is_fine . . . . . .	L Near	 000000AA _TEXT	
  less_than_100  . . . . . . . .	L Near	 0000022E _TEXT	
  not_less_than_100  . . . . . .	L Near	 00000238 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dec_dot  . . . . . . . . . . . .	Byte	 00000202 _DATA	
dec_string_1 . . . . . . . . . .	Byte	 000001DB _DATA	
dec_string_2 . . . . . . . . . .	Byte	 00000206 _DATA	
dec_zero . . . . . . . . . . . .	Byte	 00000204 _DATA	
diff_string  . . . . . . . . . .	Byte	 000001BE _DATA	
difference . . . . . . . . . . .	DWord	 00000010 _DATA	
ec_1 . . . . . . . . . . . . . .	Byte	 00000051 _DATA	
ec_2 . . . . . . . . . . . . . .	Byte	 0000007F _DATA	
ec_3 . . . . . . . . . . . . . .	Byte	 000000B5 _DATA	
eqal_string  . . . . . . . . . .	Byte	 000001CA _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
f_remainder  . . . . . . . . . .	DWord	 00000020 _DATA	
goodBye  . . . . . . . . . . . .	Byte	 00000269 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000024 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000112 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
number_1 . . . . . . . . . . . .	DWord	 00000000 _DATA	
number_2 . . . . . . . . . . . .	DWord	 00000004 _DATA	
prod_string  . . . . . . . . . .	Byte	 000001C2 _DATA	
product  . . . . . . . . . . . .	DWord	 00000014 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 0000016C _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 0000017B _DATA	
prompt_error . . . . . . . . . .	Byte	 0000018B _DATA	
quot_string  . . . . . . . . . .	Byte	 000001C6 _DATA	
quotient . . . . . . . . . . . .	DWord	 00000018 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rem_string . . . . . . . . . . .	Byte	 000001CE _DATA	
remainder  . . . . . . . . . . .	DWord	 0000001C _DATA	
repeat_1 . . . . . . . . . . . .	Byte	 00000208 _DATA	
repeat_2 . . . . . . . . . . . .	Byte	 0000022B _DATA	
repeat_choice  . . . . . . . . .	DWord	 00000008 _DATA	
sum_string . . . . . . . . . . .	Byte	 000001BA _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
