Microsoft (R) Macro Assembler Version 14.16.27026.1	    02/27/19 13:39:01
*Sorting Random Integers    (Project05.asm		     Page 1 - 1


				TITLE Sorting Random Integers    (Project05.asm)

				; Author: Andrew Wilson
				; Last Modified: Feb 10, 2019
				; OSU email address: wilsoan6@oregonstate.edu
				; Course number/section: 271-400
				; Project Number: #5                Due Date: March 3, 2019
				; Description: This program generates random numbers in the range [100 .. 999],
				;			   displays the original list, sorts the list, and calculates the
				;			   median value. Finally, it displays the list sorted in descending order.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000064			LO = 100	;lowest int value
 = 000003E7			HI = 999	;highest int value
 = 0000000A			MIN = 10	;min number of ints
 = 000000C8			MAX = 200	;max number of ints

 00000000			.data
 00000000 00000000		numberOfInts	DWORD	?			;user specified number of ints to show
 00000004  000000C8 [		arrayOfInts		DWORD	MAX	DUP(?)	;array of ints.
	    00000000
	   ]
 00000324 57 65 6C 63 6F	intro_1			BYTE	"Welcome to Sorting Random Integers     by Andrew Wilson ", 0
	   6D 65 20 74 6F
	   20 53 6F 72 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 20
	   20 20 20 20 62
	   79 20 41 6E 64
	   72 65 77 20 57
	   69 6C 73 6F 6E
	   20 00
 0000035D 54 68 69 73 20	intro_2			BYTE	"This program generates random numbers in the range [100 .. 999],", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 00
 0000039E 64 69 73 70 6C	intro_3			BYTE	"displays the original list, sorts the list, and calculates the", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 00
 000003DD 6D 65 64 69 61	intro_4			BYTE	"median value. Finally, it displays the list sorted in descending order.", 0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00
 00000425 54 68 65 20 75	title_1			BYTE	"The unsorted random numbers:", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 00
 00000442 54 68 65 20 73	title_2			BYTE	"The sorted list:", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 00
 00000453 54 68 65 20 6D	title_3			BYTE	"The median is: ", 0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
 00000463 2A 2A 45 43 3A	ec_1			BYTE	"**EC: Aligns the output columns", 0
	   20 41 6C 69 67
	   6E 73 20 74 68
	   65 20 6F 75 74
	   70 75 74 20 63
	   6F 6C 75 6D 6E
	   73 00
 00000483 48 6F 77 20 6D	prompt_1		BYTE	"How many numbers should be generated? [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 000004B7 50 6C 65 61 73	error_1			BYTE	"Please enter a number between 10 and 200: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 30 20 61 6E
	   64 20 32 30 30
	   3A 20 00

 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		call	randomize

 00000005  68 00000324 R		push	OFFSET intro_1
 0000000A  68 0000035D R		push	OFFSET intro_2
 0000000F  68 0000039E R		push	OFFSET intro_3
 00000014  68 000003DD R		push	OFFSET intro_4
 00000019  E8 0000007A			call	introduction
					

 0000001E  68 000004B7 R		push	OFFSET error_1
 00000023  68 00000483 R		push	OFFSET prompt_1
 00000028  68 00000000 R		push	OFFSET numberOfInts		
 0000002D  E8 000000A6			call	getUserData

 00000032  68 00000004 R		push	OFFSET arrayOfInts
 00000037  FF 35 00000000 R		push	numberOfInts
 0000003D  E8 000000D1			call	fillArray

 00000042  68 00000425 R		push	OFFSET title_1	
 00000047  68 00000004 R		push	OFFSET arrayOfInts
 0000004C  FF 35 00000000 R		push	numberOfInts
 00000052  E8 000001AB			call	displayList

 00000057  68 00000004 R		push	OFFSET arrayOfInts
 0000005C  FF 35 00000000 R		push	numberOfInts
 00000062  E8 000000CE			call	sortList

 00000067  68 00000453 R		push	OFFSET title_3	
 0000006C  68 00000004 R		push	OFFSET arrayOfInts
 00000071  FF 35 00000000 R		push	numberOfInts
 00000077  E8 0000010F			call	displayMedian

 0000007C  68 00000442 R		push	OFFSET title_2	
 00000081  68 00000004 R		push	OFFSET arrayOfInts
 00000086  FF 35 00000000 R		push	numberOfInts
 0000008C  E8 00000171			call	displayList

					exit	; exit to operating system
 00000091  6A 00	   *	    push   +000000000h
 00000093  E8 00000000 E   *	    call   ExitProcess
 00000098			main ENDP

				;********************************************************************************************************
				;Procedure to introduce the program.
				;receives: none
				;returns: none
				;preconditions:  needs strings called intro_1, intro_2, intro_3, intro_4 and ec_1
				;registers changed: edx
				;********************************************************************************************************
 00000098			introduction	PROC
 00000098  55				push	ebp
 00000099  8B EC			mov		ebp, esp

 0000009B  8B 55 14			mov		edx, [ebp+20]	;@intro_1
 0000009E  E8 00000000 E		call	WriteString
 000000A3  E8 00000000 E		call	crlf
 000000A8  8B 55 10			mov		edx, [ebp+16]	;@intro_2
 000000AB  E8 00000000 E		call	WriteString
 000000B0  E8 00000000 E		call	crlf
 000000B5  8B 55 0C			mov		edx, [ebp+12]	;@intro_3
 000000B8  E8 00000000 E		call	WriteString
 000000BD  E8 00000000 E		call	crlf
 000000C2  8B 55 08			mov		edx, [ebp+8]	;@intro_4
 000000C5  E8 00000000 E		call	WriteString
 000000CA  E8 00000000 E		call	crlf
 000000CF  E8 00000000 E		call	crlf

 000000D4  5D				pop		ebp
 000000D5  C2 0010			ret		16
 000000D8			introduction	ENDP

				;********************************************************************************************************
				;Procedure to get value for numberOfInts from the user.
				;receives: numberOfInts
				;returns: user input values for variable numberOfInts
				;preconditions:  push numberOfInts before calling
				;registers changed: eax, ebx, edx
				;********************************************************************************************************
 000000D8			getUserData	PROC
 000000D8  55				push	ebp
 000000D9  8B EC			mov		ebp, esp
 000000DB  8B 55 0C			mov		edx, [ebp+12]	;prompt_1
 000000DE  E8 00000000 E		call	WriteString
 000000E3  E8 00000000 E		call	ReadInt

 000000E8			TryAgain:					;validates that input is between MIN-MAX
 000000E8  83 F8 0A			cmp		eax, MIN
 000000EB  72 09			jb		invalidInput
 000000ED  3D 000000C8			cmp		eax, MAX
 000000F2  77 02			ja		invalidInput
 000000F4  EB 0F			jmp		AllIsWell

 000000F6			InvalidInput:
 000000F6  8B 55 10			mov		edx, [ebp+16]	;error_1
 000000F9  E8 00000000 E		call	WriteString
 000000FE  E8 00000000 E		call	ReadInt
 00000103  EB E3			jmp		TryAgain

 00000105			AllIsWell:
 00000105  8B 5D 08			mov		ebx, [ebp+8]	;@numberOfInts
 00000108  89 03			mov		[ebx], eax	

 0000010A  E8 00000000 E		call	Crlf
 0000010F  5D				pop		ebp
 00000110  C2 000C			ret		12
 00000113			getUserData	ENDP

				;********************************************************************************************************
				;Procedure to fill array with random numbers
				;receives: array of dwords to store ints, number of ints to generate
				;returns: random ints into array
				;preconditions: push array address, then number of ints
				;registers changed: edx
				;********************************************************************************************************
 00000113			fillArray	PROC
 00000113  55				push	ebp
 00000114  8B EC			mov		ebp, esp
 00000116  8B 7D 0C			mov		edi, [ebp+12]	;@arrayOfInts
 00000119  8B 4D 08			mov		ecx, [ebp+8]	;loop counter

 0000011C			again:
 0000011C  B8 00000383			mov		eax, HI-LO
 00000121  40				inc		eax
 00000122  E8 00000000 E		call	randomrange
 00000127  83 C0 64			add		eax, LO			;eax now contains random number between HI and LO
 0000012A  89 07			mov		[edi], eax		;store it in the array
 0000012C  83 C7 04			add		edi, 4			;move to the next element
 0000012F  E2 EB			loop	again

 00000131  5D				pop		ebp
 00000132  C2 0008			ret		8
 00000135			fillArray	ENDP

				;********************************************************************************************************
				;Bubble sorts array of ints high to low
				;receives: array of dwords to store ints, length of array
				;returns: sorted ints into array
				;preconditions: push array address, then number of ints
				;registers changed: eax, ebx, ecx, edx
				;********************************************************************************************************
 00000135			sortList	PROC
 00000135  55				push	ebp
 00000136  8B EC			mov		ebp, esp
 00000138  8B 4D 08			mov		ecx, [ebp+8]	;loop counter
 0000013B  BB FFFFFFFF			mov		ebx, -1			;ebx tracks number of times inner loop has occurred
											;bubble sort sorts 1 element per loop, so we need to loop element number of times
											;Starts at -1 because it is incremented immediately in loop

 00000140			outer:
 00000140  8B 75 0C			mov		esi, [ebp+12]	;@arrayOfInts
 00000143  51				push	ecx				;push outer loop counter
 00000144  43				inc		ebx				;ebx tracks number of times inner loop has occurred
 00000145  8B 4D 08			mov		ecx, [ebp+8]	;loop the length of the array...
 00000148  2B CB			sub		ecx, ebx		;...minus the number of sorted elements
					
 0000014A  49				dec		ecx				;;;;
 0000014B  83 FB 00			cmp		ebx, 0			;this block decrements ecx by 1 on the first time through the loop
 0000014E  74 01			je		inner			;to prevent out-of-bounds access if the array is MAX size
 00000150  41				inc		ecx				;;;;


 00000151			inner:
 00000151  8B 06			mov		eax, [esi]		;move contents of left array element into eax
 00000153  3B 46 04			cmp		eax, [esi+4]	;compare to contents of right array element
 00000156  72 02			jb		swap
 00000158  EB 0D			jmp		noSwap
 0000015A			swap:		
 0000015A  56				push	esi				;@left element
 0000015B  83 C6 04			add		esi, 4
 0000015E  56				push	esi				;@right element
 0000015F  83 EE 04			sub		esi, 4
 00000162  E8 0000000C			call	exchange
 00000167			noSwap:
 00000167  83 C6 04			add		esi, 4
 0000016A  E2 E5			loop	inner
 0000016C			finished:
 0000016C  59				pop		ecx				;restore outer loop counter
 0000016D  E2 D1			loop	outer

 0000016F  5D				pop		ebp
 00000170  C2 0008			ret		8
 00000173			sortList	ENDP

				;********************************************************************************************************
				;Swaps two ints
				;receives: two ints by reference
				;returns: swapped ints
				;preconditions: push two DWORD ints
				;registers changed: eax, edx
				;********************************************************************************************************
 00000173			exchange	PROC
 00000173  55				push	ebp
 00000174  8B EC			mov		ebp, esp
 00000176  8B 7D 0C			mov		edi, [ebp+12]	;@left element
 00000179  8B 07			mov		eax, [edi]		;left element
 0000017B  8B 7D 08			mov		edi, [ebp+8]	;@right element
 0000017E  8B 17			mov		edx, [edi]		;right element

 00000180  89 07			mov		[edi], eax
 00000182  8B 7D 0C			mov		edi, [ebp+12]	;@left element
 00000185  89 17			mov		[edi], edx

 00000187  5D				pop		ebp
 00000188  C2 0008			ret		8

 0000018B			exchange	ENDP


				;********************************************************************************************************
				;Procedure to calculate and display median
				;receives: array of dword ints, number of ints, title to display
				;returns: prints median to console
				;preconditions: push title, array address, then number of ints
				;registers changed: eax, ebx, edx
				;********************************************************************************************************
 0000018B			displayMedian	PROC
 0000018B  55				push	ebp
 0000018C  8B EC			mov		ebp, esp
 0000018E  8B 55 10			mov		edx, [ebp+16]	;@title
 00000191  E8 00000000 E		call	WriteString

 00000196  8B 7D 0C			mov		edi, [ebp+12]	;@arrayOfInts
 00000199  8B 45 08			mov		eax, [ebp+8]	;number of ints

 0000019C  BB 00000002			mov		ebx, 2
 000001A1  99				cdq
 000001A2  F7 F3			div		ebx				;divide count by 2 (ignoring remainder) for index of middle element
 000001A4  BB 00000004			mov		ebx, 4
 000001A9  F7 E3			mul		ebx				;multiply by 4 to get offset from array, stored in eax
 000001AB  8B D8			mov		ebx, eax		;store this offset in ebx

 000001AD  8B 45 08			mov		eax, [ebp+8]	;number of ints
 000001B0  A9 00000001			test	eax, 1			;test if count is even or odd (LSB is 1 or 0)
 000001B5  74 0C			jz		isEven
 000001B7  EB 00			jmp		isOdd

 000001B9			isOdd:						;if odd, print value of middle element
 000001B9  8B 04 1F			mov		eax, [edi+ebx]	
 000001BC  E8 00000000 E		call	WriteDec
 000001C1  EB 31			jmp		theEnd
 000001C3			isEven:						;if even, print mean of middle two elements
 000001C3  8B 04 1F			mov		eax, [edi+ebx]
 000001C6  83 EB 04			sub		ebx, 4
 000001C9  03 04 1F			add		eax, [edi+ebx]	;sum the two middle numbers
 000001CC  BB 00000002			mov		ebx, 2
 000001D1  99				cdq
 000001D2  F7 F3			div		ebx				;divide by two
 000001D4  E8 00000000 E		call	WriteDec
 000001D9  66| F7 C2 0001		test	dx, 1			;if there is a remainder, display '.5'
 000001DE  74 14			jz		theEnd			
 000001E0  B8 0000002E			mov		eax, 46			;46 is ASCII '.'
 000001E5  E8 00000000 E		call	WriteChar
 000001EA  B8 00000035			mov		eax, 53			;53 is ASCII '5'
 000001EF  E8 00000000 E		call	WriteChar

 000001F4			theEnd:
 000001F4  E8 00000000 E		call	crlf
 000001F9  E8 00000000 E		call	crlf

 000001FE  5D				pop		ebp
 000001FF  C2 000C			ret		12
 00000202			displayMedian	ENDP

				;********************************************************************************************************
				;Procedure to display an array of DWORD integers
				;receives: address of title of array to display, address of array of dwords to store ints, number of ints to generate
				;returns: -
				;preconditions: push title, array address, then number of ints
				;registers changed: eax, ecx, edx
				;********************************************************************************************************
 00000202			displayList	PROC
 00000202  55				push	ebp
 00000203  8B EC			mov		ebp, esp
 00000205  8B 55 10			mov		edx, [ebp+16]	;@title
 00000208  E8 00000000 E		call	WriteString
 0000020D  E8 00000000 E		call	crlf
 00000212  8B 75 0C			mov		esi, [ebp+12]	;@arrayOfInts
 00000215  8B 4D 08			mov		ecx, [ebp+8]	;loop counter
 00000218  BA 00000000			mov		edx, 0			;use edx as a counter to space lines

 0000021D			again:
 0000021D  8B 06			mov		eax,[esi]		;put array value in eax
 0000021F  E8 00000000 E		call	WriteDec
 00000224  B8 00000009			mov		eax, 9			;9 is ASCII tab, used to space columns
 00000229  E8 00000000 E		call	WriteChar
 0000022E  42				inc		edx
 0000022F  83 FA 0A			cmp		edx, 10			
 00000232  75 0A			jne		noNewLine		;if 10 characters have been written, newline, then set edx back to 0
 00000234  E8 00000000 E		call	crlf
 00000239  BA 00000000			mov		edx, 0

 0000023E			noNewLine:
 0000023E  83 C6 04			add		esi, 4			;move to the next element
 00000241  E2 DA			loop	again

 00000243  E8 00000000 E		call	crlf
 00000248  E8 00000000 E		call	crlf

 0000024D  5D				pop		ebp
 0000024E  C2 000C			ret		12
 00000251			displayList	ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    02/27/19 13:39:01
*Sorting Random Integers    (Project05.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004E2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000251 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 00000202 _TEXT	Length= 0000004F Public STDCALL
  again  . . . . . . . . . . . .	L Near	 0000021D _TEXT	
  noNewLine  . . . . . . . . . .	L Near	 0000023E _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000018B _TEXT	Length= 00000077 Public STDCALL
  isOdd  . . . . . . . . . . . .	L Near	 000001B9 _TEXT	
  isEven . . . . . . . . . . . .	L Near	 000001C3 _TEXT	
  theEnd . . . . . . . . . . . .	L Near	 000001F4 _TEXT	
exchange . . . . . . . . . . . .	P Near	 00000173 _TEXT	Length= 00000018 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000113 _TEXT	Length= 00000022 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 0000011C _TEXT	
getUserData  . . . . . . . . . .	P Near	 000000D8 _TEXT	Length= 0000003B Public STDCALL
  TryAgain . . . . . . . . . . .	L Near	 000000E8 _TEXT	
  InvalidInput . . . . . . . . .	L Near	 000000F6 _TEXT	
  AllIsWell  . . . . . . . . . .	L Near	 00000105 _TEXT	
introduction . . . . . . . . . .	P Near	 00000098 _TEXT	Length= 00000040 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000098 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000135 _TEXT	Length= 0000003E Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 00000140 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 00000151 _TEXT	
  swap . . . . . . . . . . . . .	L Near	 0000015A _TEXT	
  noSwap . . . . . . . . . . . .	L Near	 00000167 _TEXT	
  finished . . . . . . . . . . .	L Near	 0000016C _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayOfInts  . . . . . . . . . .	DWord	 00000004 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec_1 . . . . . . . . . . . . . .	Byte	 00000463 _DATA	
error_1  . . . . . . . . . . . .	Byte	 000004B7 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000324 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 0000035D _DATA	
intro_3  . . . . . . . . . . . .	Byte	 0000039E _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000003DD _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numberOfInts . . . . . . . . . .	DWord	 00000000 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000483 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
title_1  . . . . . . . . . . . .	Byte	 00000425 _DATA	
title_2  . . . . . . . . . . . .	Byte	 00000442 _DATA	
title_3  . . . . . . . . . . . .	Byte	 00000453 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
